
+makeCacheMatrix<-function(x=matrix()){ ## define the argument with default mode of "matrix"
+  i<-NULL                              ## initialize i as NULL; will hold value of matrix inverse
+  set<-function(y){                    ## define the set function to assign new 
+    x<<-y                              ## value of matrix in parent environment
+    i<<-NULL                           ## if there is a new matrix, reset i to NULL
+  }
+  get<-function()x                     ## define the get fucntion - returns value of the matrix argument
+  setinverse<-function(inverse)        ## assigns value of i in parent environment
+    i<<-inverse
+  getinverse<-function()i              ## gets the value of i where called
+  list(set=set,get=get,setinverse=setinverse,getinverse=getinverse) ## you need this in order to refer
+}                                                                   ## to the functions with the $ operator
+
+## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
+## If the inverse has already been calculated (and the matrix has not changed),
+## then cacheSolve will retrieve the inverse from the cache
+cacheSolve<-function(x,...){                       
+  i<-x$getinverse()
+  if(!is.null(i)){
+    message("getting cached data")
+    return(i)
+  }
+  data<-x$get()
+  i<-solve(data,...)
+  x$setinverse(i)
+  i
+}
